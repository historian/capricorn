#!/usr/bin/env ruby
require 'opts'
require 'shellwords'

class CLI
  include Opts::DSL

  class_option "root",
    :short   => 'r',
    :default => File.expand_path('../../', $0),
    :type    => :string

  class_option "port",
    :short   => 'p',
    :default => "0",
    :type    => :string

  def install(env, args)
    require 'fileutils'

    @root = env['ROOT']
    generate_other_paths

    FileUtils.mkdir_p(File.join(@root, "etc/capricorn"),
                      :verbose => true)
    FileUtils.mkdir_p(File.join(@root, "var/run/capricorn"),
                      :verbose => true)
    FileUtils.mkdir_p(File.join(@root, "var/log/sasl"),
                      :verbose => true)

    FileUtils.cp(File.join(@rel, 'etc/capricorn/app.config'),
                 File.join(@etc, 'app.config'),
                 :verbose => true)
    FileUtils.cp(File.join(@rel, 'etc/capricorn/vm.args'),
                 File.join(@etc, 'vm.args'),
                 :verbose => true)
  end

  def tail(env, args)
    @root = env['ROOT']
    exec(Shellwords.shelljoin(["tail", "-n", "0", "-f", File.join(@root, "var/log/capricorn.log")]))
  end

  def console(env, args)
    @root = env['ROOT']
    generate_other_paths

    exec(Shellwords.shelljoin([File.join(@rel, 'bin/capricornd'), @root, env['PORT'], 'console'] + args))
  end

  def start(env, args)
    @root = env['ROOT']
    generate_other_paths

    exec(Shellwords.shelljoin([File.join(@rel, 'bin/capricornd'), @root, env['PORT'], 'start'] + args))
  end

  def stop(env, args)
    @root = env['ROOT']
    generate_other_paths

    exec(Shellwords.shelljoin([File.join(@rel, 'bin/capricornd'), @root, env['PORT'], 'stop'] + args))
  end

  def restart(env, args)
    @root = env['ROOT']
    generate_other_paths

    exec(Shellwords.shelljoin([File.join(@rel, 'bin/capricornd'), @root, env['PORT'], 'restart'] + args))
  end

  def reboot(env, args)
    @root = env['ROOT']
    generate_other_paths

    exec(Shellwords.shelljoin([File.join(@rel, 'bin/capricornd'), @root, env['PORT'], 'reboot'] + args))
  end

  def ping(env, args)
    @root = env['ROOT']
    generate_other_paths

    exec(Shellwords.shelljoin([File.join(@rel, 'bin/capricornd'), @root, env['PORT'], 'ping'] + args))
  end

  def attach(env, args)
    @root = env['ROOT']
    generate_other_paths

    exec(Shellwords.shelljoin([File.join(@rel, 'bin/capricornd'), @root, env['PORT'], 'attach'] + args))
  end

private

  def generate_other_paths
    @src = File.expand_path('../../', __FILE__)
    @rel = File.join(@src, 'erlang/rel/capricorn')
    @etc = File.join(@root, 'etc/capricorn')
  end

end

CLI.new.call({}, ARGV.dup)